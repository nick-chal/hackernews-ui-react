{"version":3,"sources":["constants/routes.js","components/Navbar.js","utils/http.js","services/api.js","constants/data.js","components/Stories.js","components/App.js","serviceWorker.js","index.js"],"names":["routes","Navbar","react_default","a","createElement","Fragment","className","NavLink","exact","to","ROUTES","http","axios","create","baseURL","request","type","id","arguments","length","undefined","get","concat","data","Stories","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pageHandler","value","state","currentPage","setState","prevState","updateStoriesList","storiesIdList","loadStories","api","storyType","then","storiesList","catch","err","stories","end","i","start","story","toConsumableArray","componentDidMount","componentDidUpdate","prevProps","location","pathname","_this2","constant","map","index","key","href","url","title","by","score","onClick","React","Component","withRouter","App","BrowserRouter","components_Navbar","Switch","Route","path","render","Redirect","component","components_Stories","Boolean","window","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5c4db3c.chunk.js","sourcesContent":["export default {\n  BEST: '/beststories',\n  NEW: '/newstories',\n  TOP: '/topstories'\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport ROUTES from '../constants/routes';\n\n/**\n * The component for the navbar.\n */\nconst Navbar = () => (\n  <>\n    <div className=\"header\">\n      <h2>HackerNews</h2>\n      <p>Hackernews api using react</p>\n    </div>\n    <ul className=\"navbar\">\n      <li>\n        <NavLink exact to={ROUTES.BEST}>\n          Best\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to={ROUTES.TOP}>\n          Top\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to={ROUTES.NEW}>\n          New\n        </NavLink>\n      </li>\n    </ul>\n  </>\n);\n\nexport default Navbar;\n","import axios from 'axios';\n\nconst http = axios.create({\n  baseURL: 'https://hacker-news.firebaseio.com/v0/'\n});\n\nexport default http;\n","import http from '../utils/http';\n\n/**\n * Send appropriate axios request based on the type.\n *\n * @param {String} type Determine request for stories list, story or comment.\n * @param {Number} [id=null]\n */\nconst request = (type, id = null) => {\n  if (!id) {\n    return http.get(type + '.json');\n  }\n\n  return http.get(`item/${id}.json`);\n};\n\nexport default request;\n","export default {\n  STORYPERPAGE: 10\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nimport api from '../services/api';\nimport constant from '../constants/data';\n\n/**\n * The main page showing all the top stories.\n */\nclass Stories extends React.Component {\n  /**\n   * Creates the instance of Home.\n   *\n   * @param {object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      storyType: props.location.pathname,\n      storiesIdList: [],\n      stories: [],\n      currentPage: 0\n    };\n  }\n\n  /**\n   * Change the page number.\n   *\n   * @param {Number} value\n   */\n  pageHandler = value => {\n    if (\n      (this.state.currentPage === 0 && value === -1) ||\n      (this.state.currentPage === 4 && value === 1)\n    ) {\n      return;\n    }\n    this.setState(prevState => ({\n      currentPage: prevState.currentPage + value\n    }));\n  };\n\n  /**\n   * Load the storiesId and update StoriesIDList.\n   */\n  updateStoriesList = () => {\n    if (this.state.storiesIdList && this.state.storiesIdList.length > 1) {\n      this.loadStories();\n\n      return;\n    }\n    api(this.state.storyType)\n      .then(storiesList => {\n        this.setState({ storiesIdList: storiesList.data }, this.loadStories);\n      })\n      .catch(err => this.setState({ err: err }));\n  };\n\n  /**\n   * Load individual stories from storiesIDList.\n   *\n   */\n  loadStories = () => {\n    if (this.state.stories && this.state.stories.length > this.end) {\n      return;\n    }\n    for (let i = this.start; i < this.end; i++) {\n      api('story', this.state.storiesIdList[i]).then(story => {\n        this.setState({ stories: [...this.state.stories, story.data] });\n      });\n    }\n  };\n\n  /**\n   * Called after the component is mounted in dom.\n   */\n  componentDidMount = () => {\n    this.updateStoriesList();\n  };\n\n  /**\n   * Update the shown after changing page.\n   *\n   * @param {*} prevProps\n   * @param {*} prevState\n   */\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.currentPage !== this.state.currentPage) {\n      this.updateStoriesList();\n    }\n  };\n\n  /**\n   * Renders the Home content.\n   */\n  render() {\n    this.start = this.state.currentPage * constant.STORYPERPAGE;\n    this.end = this.start + constant.STORYPERPAGE;\n\n    return (\n      <div>\n        <ul className=\"stories-list\">\n          {this.state.stories && this.state.stories.length > 0 ? (\n            this.state.stories.map((value, index) =>\n              index >= this.start && index < this.end ? (\n                <li className=\"story\" key={value.id}>\n                  <a href={value.url}>{`${value.title}`}</a> <br />\n                  <span>{`-(${value.by})   score: ${value.score}`}</span>\n                </li>\n              ) : null\n            )\n          ) : (\n            <div className=\"no-items\"> {'Loading...'}</div>\n          )}\n        </ul>\n        <div>\n          <button\n            onClick={() => {\n              this.pageHandler(-1);\n            }}\n          >\n            P\n          </button>\n          <span>\n            {this.state.currentPage + 1}\n            <button\n              onClick={() => {\n                this.pageHandler(1);\n              }}\n            >\n              N\n            </button>\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Stories);\n\nStories.propTypes = {\n  location: PropTypes.object.isRequired\n};\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\n\nimport '../assets/style';\nimport Navbar from './Navbar';\nimport Stories from './Stories';\nimport ROUTES from '../constants/routes';\n\n/**\n * The main container of the app.\n */\nclass App extends Component {\n  /**\n   * Return the main container JSX.\n   */\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={() => <Redirect to=\"/topstories\" />}\n            />\n            <Route exact path={ROUTES.TOP} component={() => <Stories />} />\n            <Route exact path={ROUTES.NEW} component={() => <Stories />} />\n            <Route exact path={ROUTES.BEST} component={() => <Stories />} />\n            <Route path=\"/\" render={() => <div>404 Invalid URL </div>} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}