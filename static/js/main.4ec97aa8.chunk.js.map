{"version":3,"sources":["constants/routes.js","components/Navbar.js","utils/http.js","services/api.js","utils/time.js","components/Comment.js","components/Story.js","constants/data.js","components/StoryList.js","components/App.js","serviceWorker.js","index.js"],"names":["routes","Navbar","react_default","a","createElement","Fragment","className","NavLink","exact","to","ROUTES","http","axios","create","baseURL","request","type","id","arguments","length","undefined","get","concat","timeElapsed","thenTimeUnix","then","diff","Date","now","yearDiff","Math","floor","monthDiff","dateDiff","hourDiff","minuteDiff","Comment","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchComment","state","comment","api","commentId","response","setState","data","displayContent","by","time","dangerouslySetInnerHTML","__html","text","kids","map","value","index","key","componentDidMount","render","React","Component","Story","fetchStory","story","storyId","notFound","href","url","title","score","descendants","ceil","match","params","display","components_Comment","withRouter","Stories","pageHandler","currentPage","prevState","updateStoriesList","storiesIdList","loadStories","storyType","storiesList","catch","err","stories","end","i","start","toConsumableArray","displayStories","Link","componentDidUpdate","prevProps","location","pathname","_this2","constant","onClick","App","BrowserRouter","components_Navbar","Switch","Route","path","Redirect","component","StoryList","components_Story","Boolean","window","hostname","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ec97aa8.chunk.js","sourcesContent":["export default {\n  BEST: '/beststories',\n  NEW: '/newstories',\n  TOP: '/topstories'\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport ROUTES from '../constants/routes';\n\n/**\n * The component for the navbar.\n */\nconst Navbar = () => (\n  <>\n    <div className=\"header\">\n      <h2>HackerNews</h2>\n      <p>Hackernews api using react</p>\n    </div>\n    <ul className=\"navbar\">\n      <li>\n        <NavLink exact to={ROUTES.BEST}>\n          Best\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to={ROUTES.TOP}>\n          Top\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to={ROUTES.NEW}>\n          New\n        </NavLink>\n      </li>\n    </ul>\n  </>\n);\n\nexport default Navbar;\n","import axios from 'axios';\n\nconst http = axios.create({\n  baseURL: 'https://hacker-news.firebaseio.com/v0/'\n});\n\nexport default http;\n","import http from '../utils/http';\n\n/**\n * Send appropriate axios request based on the type.\n *\n * @param {String} type Determine request for stories list, story or comment.\n * @param {Number} [id=null]\n */\nconst request = (type, id = null) => {\n  if (!id) {\n    return http.get(type + '.json');\n  }\n\n  return http.get(`item/${id}.json`);\n};\n\nexport default request;\n","/**\n * Find the time elapsed after certain time.\n *\n * @param {Number} thenTimeUnix\n */\nconst timeElapsed = thenTimeUnix => {\n  const then = thenTimeUnix * 100000;\n  const now = Date.now();\n\n  const diff = (now - then) / 1000 / 60;\n\n  const yearDiff = Math.floor(diff / 60 / 24 / 365);\n  const monthDiff = Math.floor(diff / 60 / 24 / 30);\n  const dateDiff = Math.floor(diff / 60 / 24);\n  const hourDiff = Math.floor(diff / 60);\n  const minuteDiff = Math.floor(diff);\n\n  if (yearDiff > 0) {\n    return `${yearDiff} years ago`;\n  }\n\n  if (monthDiff > 0) {\n    return `${monthDiff} months ago`;\n  }\n\n  if (dateDiff > 0) {\n    return `${dateDiff} days ago`;\n  }\n\n  if (hourDiff > 0) {\n    return `${hourDiff} hours ago`;\n  }\n\n  return `${minuteDiff} minutes ago`;\n};\n\nexport default timeElapsed;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport api from '../services/api';\nimport timeElapsed from '../utils/time';\n/**\n * Display comment.\n */\nclass Comment extends React.Component {\n  /**\n   * Creates an instance of Comment.\n   *\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      kids: [],\n      commentId: props.commentId\n    };\n  }\n\n  fetchComment = () => {\n    if (this.state.comment && this.state.comment > 0) {\n      return;\n    }\n\n    api('comment', this.state.commentId).then(response => {\n      this.setState({\n        comment: response.data\n      });\n    });\n  };\n\n  displayContent = () => {\n    if (!this.state.comment) {\n      return <div>Loading</div>;\n    }\n\n    return (\n      <div className=\"comment\">\n        <div className=\"comment-body\">\n          <div>\n            <h4>{this.state.comment.by}</h4>\n            <span className=\"story-detail\">\n              {timeElapsed(Math.floor(this.state.comment.time / 100))}\n            </span>\n          </div>\n          <div dangerouslySetInnerHTML={{ __html: this.state.comment.text }} />\n        </div>\n        <div className=\"comment-sub\">\n          {this.state.comment.kids && this.state.comment.kids.length > 0\n            ? this.state.comment.kids.map((value, index) => (\n                <Comment commentId={value} key={`${value.id}${index}`} />\n              ))\n            : null}\n        </div>\n      </div>\n    );\n  };\n\n  componentDidMount = () => {\n    this.fetchComment();\n  };\n\n  /**\n   * Render the comment.\n   *\n   */\n  render = () => {\n    const display = this.displayContent();\n\n    return display;\n  };\n}\n\nexport default Comment;\n\nComment.propTypes = {\n  commentId: PropTypes.number.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nimport Comment from './Comment';\nimport api from '../services/api';\nimport timeElapsed from '../utils/time';\n\n/**\n * Display all the details and comments of the story.\n */\nclass Story extends React.Component {\n  /**\n   * Creates an instance of Comments.\n   *\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      storyId: props.match.params.id,\n      notFound: false\n    };\n  }\n\n  fetchStory = () => {\n    if (this.state.story && this.state.story > 0) {\n      return;\n    }\n\n    api('story', this.state.storyId).then(response => {\n      if (response.data === null) {\n        this.setState({ notFound: true });\n\n        return;\n      }\n\n      this.setState({\n        story: response.data\n      });\n    });\n  };\n\n  displayContent = () => {\n    if (this.state.notFound) {\n      return <div>404 No such link found! Check the address</div>;\n    }\n\n    if (!this.state.story) {\n      return <div>Loading</div>;\n    }\n\n    return (\n      <div>\n        <h2 className=\"story-heading\">\n          <a href={this.state.story.url}>{this.state.story.title}</a>\n        </h2>\n        <span className=\"story-detail\">{`by ${this.state.story.by} ${\n          this.state.story.score\n        } points ${this.state.story.descendants} comments ${timeElapsed(\n          Math.ceil(this.state.story.time / 100)\n        )}`}</span>\n      </div>\n    );\n  };\n\n  componentDidMount = () => {\n    this.fetchStory();\n  };\n\n  /**\n   * Render the component.\n   */\n  render() {\n    const display = this.displayContent();\n\n    return (\n      <React.Fragment>\n        {display}\n        <div className=\"comment-section\">\n          {this.state.story && this.state.story.kids ? (\n            this.state.story.kids.map(comment => {\n              return <Comment commentId={comment} key={comment} />;\n            })\n          ) : (\n            <div className=\"comment-main\">No Comments</div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(Story);\n\nStory.propTypes = {\n  match: PropTypes.object.isRequired\n};\n","export default {\n  STORYPERPAGE: 10\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport api from '../services/api';\nimport constant from '../constants/data';\nimport timeElapsed from '../utils/time';\n\n/**\n * The main page showing all the top stories.\n */\nclass Stories extends React.Component {\n  /**\n   * Creates the instance of Home.\n   *\n   * @param {object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      storyType: props.location.pathname,\n      storiesIdList: [],\n      stories: [],\n      currentPage: 0\n    };\n  }\n\n  /**\n   * Change the page number.\n   *\n   * @param {Number} value\n   */\n  pageHandler = value => {\n    if (\n      (this.state.currentPage === 0 && value === -1) ||\n      (this.state.currentPage === 4 && value === 1)\n    ) {\n      return;\n    }\n    this.setState(prevState => ({\n      currentPage: prevState.currentPage + value\n    }));\n  };\n\n  /**\n   * Load the storiesId and update StoriesIDList.\n   */\n  updateStoriesList = () => {\n    if (this.state.storiesIdList && this.state.storiesIdList.length > 1) {\n      this.loadStories();\n\n      return;\n    }\n    api(this.state.storyType)\n      .then(storiesList => {\n        this.setState({ storiesIdList: storiesList.data }, this.loadStories);\n      })\n      .catch(err => this.setState({ err: err }));\n  };\n\n  /**\n   * Load individual stories from storiesIDList.\n   *\n   */\n  loadStories = () => {\n    if (this.state.stories && this.state.stories.length > this.end) {\n      return;\n    }\n    for (let i = this.start; i < this.end; i++) {\n      api('story', this.state.storiesIdList[i]).then(story => {\n        this.setState({ stories: [...this.state.stories, story.data] });\n      });\n    }\n  };\n\n  displayStories = () => {\n    const result = this.state.stories.map((value, index) =>\n      value && index >= this.start && index < this.end ? (\n        <Link to={`/${value.id}`} key={value.id}>\n          <li className=\"story\">\n            <p>{`${value.title}`}</p>\n            <span className=\"story-detail\">{`-by ${value.by} | ${\n              value.score\n            } points | ${value.descendants} comments | ${timeElapsed(\n              Math.floor(value.time / 100)\n            )}`}</span>\n          </li>\n        </Link>\n      ) : null\n    );\n\n    return result;\n  };\n\n  /**\n   * Called after the component is mounted in dom.\n   */\n  componentDidMount = () => {\n    this.updateStoriesList();\n  };\n\n  /**\n   * Update the shown after changing page.\n   *\n   * @param {*} prevProps\n   * @param {*} prevState\n   */\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.currentPage !== this.state.currentPage) {\n      this.updateStoriesList();\n    }\n  };\n\n  /**\n   * Renders the Home content.\n   */\n  render() {\n    this.start = this.state.currentPage * constant.STORYPERPAGE;\n    this.end = this.start + constant.STORYPERPAGE;\n\n    return (\n      <div>\n        <div>\n          <button\n            onClick={() => {\n              this.pageHandler(-1);\n            }}\n          >\n            {'<'}\n          </button>\n          <span>\n            {this.state.currentPage + 1}\n            <button\n              onClick={() => {\n                this.pageHandler(1);\n              }}\n            >\n              {'>'}\n            </button>\n          </span>\n        </div>\n        <ul className=\"stories-list\">\n          {this.state.stories && this.state.stories.length > this.start ? (\n            this.displayStories()\n          ) : (\n            <div className=\"no-items\"> {'Loading...'}</div>\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Stories);\n\nStories.propTypes = {\n  location: PropTypes.object.isRequired\n};\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\n\nimport '../assets/css/style';\nimport Navbar from './Navbar';\nimport Story from './Story';\nimport StoryList from './StoryList';\nimport ROUTES from '../constants/routes';\n\n/**\n * The main container of the app.\n */\nclass App extends Component {\n  /**\n   * Return the main container JSX.\n   */\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={() => <Redirect to=\"/topstories\" />}\n            />\n            <Route exact path={ROUTES.TOP} component={() => <StoryList />} />\n            <Route exact path={ROUTES.NEW} component={() => <StoryList />} />\n            <Route exact path={ROUTES.BEST} component={() => <StoryList />} />\n            <Route exact path=\"/:id\" component={() => <Story />} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}